"use strict";

var _prototypeProperties = function (child, staticProps, instanceProps) {
  if (staticProps) Object.defineProperties(child, staticProps);
  if (instanceProps) Object.defineProperties(child.prototype, instanceProps);
};

var _get = function get(object, property, receiver) {
  var desc = Object.getOwnPropertyDescriptor(object, property);

  if (desc === undefined) {
    var parent = Object.getPrototypeOf(object);

    if (parent === null) {
      return undefined;
    } else {
      return get(parent, property, receiver);
    }
  } else if ("value" in desc && desc.writable) {
    return desc.value;
  } else {
    var getter = desc.get;
    if (getter === undefined) {
      return undefined;
    }
    return getter.call(receiver);
  }
};

var _inherits = function (subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) subClass.__proto__ = superClass;
};

var Container = require("./container");

// CSS at-rule like “this.keyframes name { }”.
//
// Can contain declarations (like this.font-face or this.page) ot another rules.
var AtRule = (function (Container) {
  function AtRule(defaults) {
    this.type = "atrule";
    _get(Object.getPrototypeOf(AtRule.prototype), "constructor", this).call(this, defaults);
  }

  _inherits(AtRule, Container);

  _prototypeProperties(AtRule, null, {
    stringify: {

      // Stringify at-rule
      value: function stringify(builder, semicolon) {
        var name = "@" + this.name;
        var params = this.params ? this.stringifyRaw("params") : "";

        if (typeof this.afterName != "undefined") {
          name += this.afterName;
        } else if (params) {
          name += " ";
        }

        if (this.nodes) {
          this.stringifyBlock(builder, name + params);
        } else {
          var before = this.style("before");
          if (before) builder(before);
          var end = (this.between || "") + (semicolon ? ";" : "");
          builder(name + params + end, this);
        }
      },
      writable: true,
      enumerable: true,
      configurable: true
    },
    append: {

      // Hack to mark, that at-rule contains children
      value: function append(child) {
        if (!this.nodes) this.nodes = [];
        return _get(Object.getPrototypeOf(AtRule.prototype), "append", this).call(this, child);
      },
      writable: true,
      enumerable: true,
      configurable: true
    },
    prepend: {

      // Hack to mark, that at-rule contains children
      value: function prepend(child) {
        if (!this.nodes) this.nodes = [];
        return _get(Object.getPrototypeOf(AtRule.prototype), "prepend", this).call(this, child);
      },
      writable: true,
      enumerable: true,
      configurable: true
    },
    insertBefore: {

      // Hack to mark, that at-rule contains children
      value: function insertBefore(exist, add) {
        if (!this.nodes) this.nodes = [];
        return _get(Object.getPrototypeOf(AtRule.prototype), "insertBefore", this).call(this, exist, add);
      },
      writable: true,
      enumerable: true,
      configurable: true
    },
    insertAfter: {

      // Hack to mark, that at-rule contains children
      value: function insertAfter(exist, add) {
        if (!this.nodes) this.nodes = [];
        return _get(Object.getPrototypeOf(AtRule.prototype), "insertAfter", this).call(this, exist, add);
      },
      writable: true,
      enumerable: true,
      configurable: true
    }
  });

  return AtRule;
})(Container);

module.exports = AtRule;