"use strict";

var _prototypeProperties = function (child, staticProps, instanceProps) {
  if (staticProps) Object.defineProperties(child, staticProps);
  if (instanceProps) Object.defineProperties(child.prototype, instanceProps);
};

var _get = function get(object, property, receiver) {
  var desc = Object.getOwnPropertyDescriptor(object, property);

  if (desc === undefined) {
    var parent = Object.getPrototypeOf(object);

    if (parent === null) {
      return undefined;
    } else {
      return get(parent, property, receiver);
    }
  } else if ("value" in desc && desc.writable) {
    return desc.value;
  } else {
    var getter = desc.get;
    if (getter === undefined) {
      return undefined;
    }
    return getter.call(receiver);
  }
};

var _inherits = function (subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) subClass.__proto__ = superClass;
};

var Node = require("./node");
var vendor = require("./vendor");

// CSS declaration like “color: black” in rules
var Declaration = (function (Node) {
  function Declaration(defaults) {
    this.type = "decl";
    _get(Object.getPrototypeOf(Declaration.prototype), "constructor", this).call(this, defaults);
  }

  _inherits(Declaration, Node);

  _prototypeProperties(Declaration, null, {
    stringify: {

      // Stringify declaration
      value: function stringify(builder, semicolon) {
        var before = this.style("before");
        if (before) builder(before);

        var between = this.style("between", "colon");
        var string = this.prop + between + this.stringifyRaw("value");

        if (this.important) {
          string += this._important || " !important";
        }

        if (semicolon) string += ";";
        builder(string, this);
      },
      writable: true,
      enumerable: true,
      configurable: true
    }
  });

  return Declaration;
})(Node);

module.exports = Declaration;