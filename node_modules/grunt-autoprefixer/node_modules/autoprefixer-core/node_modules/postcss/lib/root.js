"use strict";

var _prototypeProperties = function (child, staticProps, instanceProps) {
  if (staticProps) Object.defineProperties(child, staticProps);
  if (instanceProps) Object.defineProperties(child.prototype, instanceProps);
};

var _get = function get(object, property, receiver) {
  var desc = Object.getOwnPropertyDescriptor(object, property);

  if (desc === undefined) {
    var parent = Object.getPrototypeOf(object);

    if (parent === null) {
      return undefined;
    } else {
      return get(parent, property, receiver);
    }
  } else if ("value" in desc && desc.writable) {
    return desc.value;
  } else {
    var getter = desc.get;
    if (getter === undefined) {
      return undefined;
    }
    return getter.call(receiver);
  }
};

var _inherits = function (subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) subClass.__proto__ = superClass;
};

var Declaration = require("./declaration");
var Container = require("./container");
var Comment = require("./comment");
var AtRule = require("./at-rule");
var Result = require("./result");
var Rule = require("./rule");

// Root of CSS
var Root = (function (Container) {
  function Root(defaults) {
    this.type = "root";
    this.nodes = [];
    _get(Object.getPrototypeOf(Root.prototype), "constructor", this).call(this, defaults);
  }

  _inherits(Root, Container);

  _prototypeProperties(Root, null, {
    remove: {

      // Fix space when we remove first child
      value: function remove(child) {
        child = this.index(child);

        if (child === 0 && this.nodes.length > 1) {
          this.nodes[1].before = this.nodes[child].before;
        }

        return _get(Object.getPrototypeOf(Root.prototype), "remove", this).call(this, child);
      },
      writable: true,
      enumerable: true,
      configurable: true
    },
    normalize: {

      // Fix spaces on insert before first rule
      value: function normalize(child, sample, type) {
        var nodes = _get(Object.getPrototypeOf(Root.prototype), "normalize", this).call(this, child);

        if (sample) {
          if (type == "prepend") {
            if (this.nodes.length > 1) {
              sample.before = this.nodes[1].before;
            } else {
              delete sample.before;
            }
          } else {
            for (var i = 0; i < nodes.length; i++) {
              if (this.first != sample) nodes[i].before = sample.before;
            }
          }
        }

        return nodes;
      },
      writable: true,
      enumerable: true,
      configurable: true
    },
    stringify: {

      // Stringify styles
      value: function stringify(builder) {
        this.stringifyContent(builder);
        if (this.after) builder(this.after);
      },
      writable: true,
      enumerable: true,
      configurable: true
    },
    toResult: {

      // Generate processing result with optional source map
      value: function toResult() {
        var opts = arguments[0] === undefined ? {} : arguments[0];
        return new Result(this, opts);
      },
      writable: true,
      enumerable: true,
      configurable: true
    }
  });

  return Root;
})(Container);

module.exports = Root;